pipeline {
  agent {
    label 'maven'
  }
  parameters {
    string(name: 'frontendversion',        defaultValue: '1', description: 'image tag when custom version option choosen')
    string(name: 'orderserviceversion',    defaultValue: '1', description: 'image tag when custom version option choosen')
    string(name: 'customerserviceversion', defaultValue: '1', description: 'image tag when custom version option choosen')
    string(name: 'catalogserviceversion',  defaultValue: '1', description: 'image tag when custom version option choosen')
    string(name: 'paymentserviceversion',  defaultValue: '1', description: 'image tag when custom version option choosen')
    string(name: 'registry',               defaultValue: '', description: 'Dockerhub account with Docker Images')        
  }
  stages {
    stage('Deploy') {
      environment {
        frontendimage = "${params.registry}/front-end:${params.frontendversion}"
        orderserviceimage = "${params.registry}/order-service:${params.orderserviceversion}"
        customerserviceimage = "${params.registry}/customer-service:${params.customerserviceversion}"
        catalogserviceimage = "${params.registry}/catalog-service:${params.catalogserviceversion}"
        paymentserviceimage = "${params.registry}/payment-service:${params.paymentserviceversion}"
      }
      steps {
        script {
          echo "============================================="
          echo "Deployment configuration"
          echo "registry               : ${params.registry}"
          echo "frontendimage          : ${env.frontendimage}"
          echo "orderserviceimage      : ${env.orderserviceimage}"
          echo "customerserviceimage   : ${env.customerserviceimage}"
          echo "catalogserviceimage    : ${env.catalogserviceimage}"
          echo "paymentserviceimage    : ${env.paymentserviceimage}"
          echo "============================================="

          sh "sed -i 's/REPLACE_NAMESPACE/production/g' front-end.yml"
          sh "sed -i 's/REPLACE_NAMESPACE/production/g' order-service.yml"
          sh "sed -i 's/REPLACE_NAMESPACE/production/g' customer-service.yml"
          sh "sed -i 's/REPLACE_NAMESPACE/production/g' catalog-service.yml"
          sh "sed -i 's/REPLACE_NAMESPACE/production/g' payment-service.yml"

          sh "sed -i 's#REPLACE-IMAGE-NAME#${env.frontendimage}#g' front-end.yml"
          sh "sed -i 's#REPLACE-IMAGE-NAME#${env.orderserviceimage}#g' order-service.yml"
          sh "sed -i 's#REPLACE-IMAGE-NAME#${env.customerserviceimage}#g' customer-service.yml"
          sh "sed -i 's#REPLACE-IMAGE-NAME#${env.catalogserviceimage}#g' catalog-service.yml"
          sh "sed -i 's#REPLACE-IMAGE-NAME#${env.paymentserviceimage}#g' payment-service.yml"

          sh "cat front-end.yml"
          sh "cat order-service.yml"
          sh "cat customer-service.yml"
          sh "cat catalog-service.yml"
          sh "cat payment-service.yml"

          container('kubectl') {
            sh "kubectl apply -f mongodb-prod-configmaps.yml"
            sh "kubectl apply -f mongodb-prod-secrets.yml"
            sh "kubectl apply -f mongodb-prod-deploy.yml"
            sh "kubectl apply -f apmserver-prod-configmaps.yml"
            sh "kubectl apply -f front-end.yml"
            sh "kubectl apply -f catalog-service.yml"
            sh "kubectl apply -f customer-service.yml"
            sh "kubectl apply -f order-service.yml"
            sh "kubectl apply -f payment-service.yml"
          }
        }
      }
    }

    stage('Health Check') {
      steps {
        container('kubectl') {
          sleep 20
          sh "kubectl get pods -n production"
        }
        container('curl') {
          echo "Waiting for the service to start..."
          sleep 20
          echo "Execute a couple of CURL commands to verify UI is up..."
          executeCurl(2, "http://front-end.production")
        }
      }
    }
  }
}

def executeCurl(iterations, url) {
    for (int i = 0; i < iterations; i++) {
        sh "echo calling ${url}"
        sh "curl ${url} -f"
    }
}
